name: Build & Push Docker Images

on:
  pull_request:
  create:
    tags:
      - v*

jobs:
  # Lists all directories that have Dockerfile in them...
  list:
    runs-on: ubuntu-latest
    name: "Create a list of packages"
    steps:
      - uses: actions/checkout@v2
      - name: "Provide the list"
        id: create-list
        run: echo "::set-output name=packages::$(find cookbook -mindepth 1 -maxdepth 5 -type f -name Dockerfile -exec dirname '{}' \; | sort | jq --raw-input . | jq --slurp . | jq -c .)"
    outputs:
      packages: "${{ steps.create-list.outputs.packages }}"

  push-github:
    name: Push to GHCR
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: "${{ fromJson(needs.list.outputs.packages) }}"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Build & Push Docker Image to Github Registry
        uses: whoan/docker-build-with-cache-action@v5
        env:
          NAME: $(basename -- ${{ matrix.directory }})
        with:
          # https://docs.github.com/en/packages/learn-github-packages/publishing-a-package
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
          image_name: ${{ github.repository_owner }}/flytecookbook
          image_tag: ${{ env.NAME }}-latest,${{ env.NAME }}-${{ github.sha }},${{ env.NAME }}-${{ github.event.ref }}
          registry: ghcr.io
          push_git_tag: ${{ github.event_name != 'pull_request' }}
          push_image_and_stages: ${{ github.event_name != 'pull_request' }}
          build_extra_args: "--compress=true --build-arg=tag=ghcr.io/${{ github.repository_owner }}/flytecookbook:${{ env.NAME }}-${{ github.sha }}"
          context: ./cookbook/${{ matrix.directory }}
          dockerfile: ${{ matrix.directory }}/Dockerfile
